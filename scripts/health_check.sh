#!/bin/bash

# ==========================================
# HEALTH CHECK - –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ò–°–¢–ï–ú–´
# ==========================================

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo "üîç Property Scraper - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"
echo "==============================================="
echo ""

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
check_ok() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

check_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

check_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

check_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
total_checks=0
passed_checks=0

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP —Å–µ—Ä–≤–∏—Å–∞
check_http_service() {
    local name=$1
    local url=$2
    local expected_code=${3:-200}
    
    total_checks=$((total_checks + 1))
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ $name... "
    
    if response=$(curl -s -w "%{http_code}" -o /dev/null --connect-timeout 5 "$url" 2>/dev/null); then
        if [ "$response" -eq "$expected_code" ]; then
            check_ok "$name —Ä–∞–±–æ—Ç–∞–µ—Ç (HTTP $response)"
            passed_checks=$((passed_checks + 1))
            return 0
        else
            check_error "$name –≤–µ—Ä–Ω—É–ª HTTP $response"
            return 1
        fi
    else
        check_error "$name –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_container() {
    local name=$1
    total_checks=$((total_checks + 1))
    echo -n "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ $name... "
    
    if docker-compose ps $name 2>/dev/null | grep -q "Up"; then
        check_ok "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $name –∑–∞–ø—É—â–µ–Ω"
        passed_checks=$((passed_checks + 1))
        return 0
    else
        check_error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $name –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
}

# 1. –ü–†–û–í–ï–†–ö–ê DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–û–í
echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
containers=("postgres" "redis" "crawl4ai" "ollama" "n8n" "grafana")

for container in "${containers[@]}"; do
    check_container $container
done

echo ""

# 2. –ü–†–û–í–ï–†–ö–ê HTTP –°–ï–†–í–ò–°–û–í
echo "üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–µ—Ä–≤–∏—Å–æ–≤:"

check_http_service "Crawl4AI" "http://localhost:11235/health"
check_http_service "Ollama" "http://localhost:11434/api/tags"
check_http_service "n8n" "http://localhost:5678"
check_http_service "Grafana" "http://localhost:3000"

echo ""

# 3. –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•
echo "üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
total_checks=$((total_checks + 1))
if docker-compose exec -T postgres psql -U scraper -d property_scraper -c "SELECT 1;" > /dev/null 2>&1; then
    check_ok "PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    passed_checks=$((passed_checks + 1))
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
    total_checks=$((total_checks + 1))
    if docker-compose exec -T postgres psql -U scraper -d property_scraper -c "\dt" 2>/dev/null | grep -q "properties"; then
        check_ok "–¢–∞–±–ª–∏—Ü–∞ properties —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        passed_checks=$((passed_checks + 1))
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        count=$(docker-compose exec -T postgres psql -U scraper -d property_scraper -t -c "SELECT COUNT(*) FROM properties;" 2>/dev/null | tr -d ' \n' || echo "0")
        check_info "–û–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –±–∞–∑–µ: $count"
    else
        check_warning "–¢–∞–±–ª–∏—Ü–∞ properties –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–±–∞–∑–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞)"
    fi
else
    check_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL"
fi

echo ""

# 4. –ü–†–û–í–ï–†–ö–ê REDIS
echo "üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis:"
total_checks=$((total_checks + 1))
if docker-compose exec -T redis redis-cli ping 2>/dev/null | grep -q "PONG"; then
    check_ok "Redis —Ä–∞–±–æ—Ç–∞–µ—Ç"
    passed_checks=$((passed_checks + 1))
else
    check_error "Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
fi

echo ""

# 5. –ü–†–û–í–ï–†–ö–ê AI –ú–û–î–ï–õ–ò
echo "ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ AI –º–æ–¥–µ–ª–∏:"
total_checks=$((total_checks + 1))
if docker-compose exec -T ollama ollama list 2>/dev/null | grep -q "qwen"; then
    check_ok "AI –º–æ–¥–µ–ª—å Qwen –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
    passed_checks=$((passed_checks + 1))
else
    check_warning "AI –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    check_info "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: docker-compose exec ollama ollama pull qwen2.5:7b"
fi

echo ""

# 6. –ü–†–û–í–ï–†–ö–ê –†–ï–°–£–†–°–û–í
echo "üíª –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã:"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
free_space_kb=$(df . | tail -1 | awk '{print $4}')
free_space_gb=$(echo "scale=1; $free_space_kb / 1048576" | bc -l 2>/dev/null || echo "N/A")
if [ "$free_space_gb" != "N/A" ] && (( $(echo "$free_space_gb < 2.0" | bc -l 2>/dev/null || echo 0) )); then
    check_warning "–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: ${free_space_gb}GB"
else
    check_info "–°–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: ${free_space_gb}GB"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RAM
if command -v free &> /dev/null; then
    used_ram_percent=$(free | awk 'NR==2{printf "%.1f", $3*100/$2 }' 2>/dev/null || echo "N/A")
    if [ "$used_ram_percent" != "N/A" ] && (( $(echo "$used_ram_percent > 90.0" | bc -l 2>/dev/null || echo 0) )); then
        check_warning "–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: ${used_ram_percent}%"
    else
        check_info "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM: ${used_ram_percent}%"
    fi
fi

echo ""

# 7. –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°
echo "üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:"
success_rate=$((passed_checks * 100 / total_checks))

if [ $success_rate -eq 100 ]; then
    check_ok "–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã ($passed_checks/$total_checks)"
    echo ""
    echo "üéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!"
    echo ""
    echo "üìã –ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏:"
    echo "   ‚Ä¢ n8n:      http://$(curl -s ifconfig.me 2>/dev/null || echo localhost):5678"
    echo "   ‚Ä¢ Grafana:  http://$(curl -s ifconfig.me 2>/dev/null || echo localhost):3000"
    echo "   ‚Ä¢ Logs:     docker-compose logs -f"
    exit_code=0
elif [ $success_rate -gt 70 ]; then
    check_warning "–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ ($passed_checks/$total_checks)"
    echo ""
    echo "‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
    exit_code=1
else
    check_error "–ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º ($passed_checks/$total_checks –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ)"
    echo ""
    echo "‚ùå –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
    echo ""
    echo "üîß –î–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º:"
    echo "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose restart"
    echo "   ‚Ä¢ –õ–æ–≥–∏:       docker-compose logs"
    echo "   ‚Ä¢ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose down && docker-compose up -d"
    exit_code=2
fi

echo ""
exit $exit_code
