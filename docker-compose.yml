version: '3.8'
services:
  crawl4ai:
    image: unclecode/crawl4ai:0.6.0-r1
    container_name: crawl4ai
    ports:
      - "11235:11235"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - crawl4ai_data:/app/data
    restart: unless-stopped
    depends_on:
      - redis
    networks:
      - property-network
  
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped
    networks:
      - property-network
  
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-property_scraper}
      - POSTGRES_USER=${POSTGRES_USER:-scraper}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-scraper123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - property-network
  
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - property-network
  
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-admin123}
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=America/Argentina/Buenos_Aires
      - N8N_SECURE_COOKIE=false
    volumes:
      - n8n_data:/home/node/.n8n
    restart: unless-stopped
    networks:
      - property-network
  
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - property-network
  
  api-server:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: api-server
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scraper}:${POSTGRES_PASSWORD:-scraper123}@postgres:5432/${POSTGRES_DB:-property_scraper}
      - REDIS_URL=redis://redis:6379
      - CRAWL4AI_URL=http://crawl4ai:11235
      - OLLAMA_URL=http://ollama:11434
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - ENVIRONMENT=production
    volumes:
      - ./app:/app
      - ./configs:/app/configs
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
      - crawl4ai
      - ollama
    networks:
      - property-network
    command: ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]  # ДОБАВИТЬ ЭТУ СТРОКУ

  telegram-bot:
    build: 
      context: .
      dockerfile: Dockerfile.bot
    container_name: telegram-bot
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - API_SERVER_URL=http://api-server:8000
      - DATABASE_URL=postgresql://${POSTGRES_USER:-scraper}:${POSTGRES_PASSWORD:-scraper123}@postgres:5432/${POSTGRES_DB:-property_scraper}
    volumes:
      - ./app:/app
    restart: unless-stopped
    depends_on:
      - api-server
    networks:
      - property-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - property-network

volumes:
  crawl4ai_data:
  ollama_data:
  postgres_data:
  redis_data:
  n8n_data:
  grafana_data:
  prometheus_data:

networks:
  property-network:
    driver: bridge
